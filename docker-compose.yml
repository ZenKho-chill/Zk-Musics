version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: zkmusic-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: zkmusic
      MONGO_INITDB_ROOT_USERNAME: zkmusic
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD:-zkmusic123}
    ports:
      - "27017:27017"
    volumes:
      - ./init/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    networks:
      - zkmusic-network
    healthcheck:
      test: ["CMD", "mongosh", "-u", "zkmusic", "-p", "${DB_PASSWORD:-zkmusic123}", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Lavalink Audio Server
  lavalink:
    image: fredboat/lavalink:4.0.8
    container_name: zkmusic-lavalink
    restart: unless-stopped
    ports:
      - "2333:2333"
    environment:
      - JAVA_OPTS=-Xmx2G -Xms1G
    networks:
      - zkmusic-network
    volumes:
      - lavalink_data:/opt/Lavalink
      - ./lavalink/application.yml:/defaults/application.yml:ro
    entrypoint: >
      sh -c "
        if [ ! -f /opt/Lavalink/application.yml ]; then
          echo 'Copying default application.yml...'
          cp /defaults/application.yml /opt/Lavalink/application.yml
        fi
        exec java -jar Lavalink.jar
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Authorization: youshallnotpass", "http://localhost:2333/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Zk Music's Discord Bot
  zkmusic:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zkmusic-bot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DISCORD_APP_TOKEN=${DISCORD_APP_TOKEN}
    env_file:
      - .env
    depends_on:
      - lavalink
      # - mongodb
    networks:
      - zkmusic-network
    healthcheck:
      test: ["CMD", "echo", "Bot is running"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (optional)
  # postgres:
  #   image: postgres:16
  #   container_name: zkmusic-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: zkmusic
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
  #     TZ: Asia/Ho_Chi_Minh
  #     PGTZ: Asia/Ho_Chi_Minh
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./init/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro
  #   networks:
  #     - zkmusic-network

  # MySQL Database (optional)
  # mysql:
  #   image: mysql:8.4
  #   container_name: zkmusic-mysql
  #   restart: unless-stopped
  #   environment:
  #     MYSQL_DATABASE: zkmusic
  #     MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./init/mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql:ro
  #   networks:
  #     - zkmusic-network

volumes:
  lavalink_data:

networks:
  zkmusic-network:
    driver: bridge
