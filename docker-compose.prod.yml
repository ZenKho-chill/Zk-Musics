version: '3.8'

# Production Docker Compose Configuration
# Optimized for production deployment

services:
  # Zk Music's Discord Bot
  zkmusic:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: zkmusic-bot-prod
    restart: always
    environment:
      - NODE_ENV=production
      - DEBUG_MODE=false
    env_file:
      - .env
    volumes:
      - ./config.yml:/app/config.yml:ro
      - zkmusic_logs:/app/logs
      - zkmusic_data:/app/database
    depends_on:
      lavalink:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - zkmusic-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Lavalink Audio Server
  lavalink:
    image: fredboat/lavalink:4.0.8
    container_name: zkmusic-lavalink-prod
    restart: always
    ports:
      - "127.0.0.1:2333:2333"  # Only expose locally
    volumes:
      - ./lavalink/application.yml:/opt/Lavalink/application.yml:ro
      - lavalink_logs:/opt/Lavalink/logs
    environment:
      - JAVA_OPTS=-Xmx2G -Xms1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    networks:
      - zkmusic-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2333/version", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zkmusic-postgres-prod
    restart: always
    environment:
      - POSTGRES_DB=zkmusic
      - POSTGRES_USER=zkmusic
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - zkmusic-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zkmusic -d zkmusic"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: zkmusic-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    networks:
      - zkmusic-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: zkmusic-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - zkmusic
    networks:
      - zkmusic-prod
    profiles:
      - proxy

networks:
  zkmusic-prod:
    driver: bridge

volumes:
  zkmusic_logs:
    driver: local
  zkmusic_data:
    driver: local
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  lavalink_logs:
    driver: local
  nginx_logs:
    driver: local
