/**
 * C·∫•u h√¨nh ng√¥n ng·ªØ cho bot v·ªõi c·∫•u tr√∫c client/server m·ªõi
 * File n√†y ch·ª©a danh s√°ch c√°c ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£ v√† t√™n hi·ªÉn th·ªã c·ªßa ch√∫ng
 * 
 * C·∫•u tr√∫c m·ªõi:
 * - languages/en/client/ - Giao di·ªán ng∆∞·ªùi d√πng (commands, errors, messages, ui)
 * - languages/en/server/ - H·ªá th·ªëng n·ªôi b·ªô (events, handlers, services, validation)
 * - languages/vi/client/ - T∆∞∆°ng t·ª± cho ti·∫øng Vi·ªát
 * - languages/vi/server/ - T∆∞∆°ng t·ª± cho ti·∫øng Vi·ªát
 */

import { ConfigData } from "../services/ConfigData.js";

export interface LanguageInfo {
  code: string;
  name: string;
  nativeName: string;
  flag?: string;
}

/**
 * Danh s√°ch c√°c ng√¥n ng·ªØ ƒë∆∞·ª£c bot h·ªó tr·ª£
 * Th√™m ng√¥n ng·ªØ m·ªõi v√†o ƒë√¢y khi c·∫ßn m·ªü r·ªông
 */
export const SUPPORTED_LANGUAGES: LanguageInfo[] = [
  {
    code: "vi",
    name: "Ti·∫øng Vi·ªát",
    nativeName: "Vietnamese",
    flag: "üáªüá≥"
  },
  {
    code: "en", 
    name: "Ti·∫øng Anh",
    nativeName: "English",
    flag: "üá∫üá∏"
  }
];

/**
 * L·∫•y th√¥ng tin ng√¥n ng·ªØ theo m√£
 */
export function getLanguageInfo(code: string): LanguageInfo | undefined {
  return SUPPORTED_LANGUAGES.find(lang => lang.code === code);
}

/**
 * L·∫•y t√™n hi·ªÉn th·ªã c·ªßa ng√¥n ng·ªØ
 */
export function getLanguageDisplayName(code: string): string {
  const lang = getLanguageInfo(code);
  if (!lang) return code;
  
  return `${lang.name} (${lang.nativeName})${lang.flag ? ' ' + lang.flag : ''}`;
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ m√£ ng√¥n ng·ªØ
 */
export function getLanguageCodes(): string[] {
  return SUPPORTED_LANGUAGES.map(lang => lang.code);
}

/**
 * Ki·ªÉm tra xem ng√¥n ng·ªØ c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ hay kh√¥ng
 */
export function isLanguageSupported(code: string): boolean {
  return SUPPORTED_LANGUAGES.some(lang => lang.code === code);
}

/**
 * L·∫•y ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh c·ªßa bot t·ª´ config
 */
export function getDefaultLanguage(): string {
  const config = new ConfigData().data;
  return config.bot.LANGUAGE || "en"; // Fallback v·ªÅ "vi" n·∫øu config kh√¥ng c√≥
}

/**
 * Chuy·ªÉn ƒë·ªïi Discord locale th√†nh m√£ ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£
 * @param discordLocale Discord locale (v√≠ d·ª•: "vi", "en-US", "ja", etc.)
 * @returns M√£ ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh
 */
export function mapDiscordLocaleToSupportedLanguage(discordLocale: string): string {
  if (!discordLocale) return getDefaultLanguage();
  
  // Chuy·ªÉn v·ªÅ lowercase ƒë·ªÉ so s√°nh
  const locale = discordLocale.toLowerCase();
  
  // Mapping c√°c Discord locale th√†nh ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£
  const localeMapping: { [key: string]: string } = {
    // Ti·∫øng Vi·ªát
    "vi": "vi",
    
    // Ti·∫øng Anh (t·∫•t c·∫£ variants)
    "en": "en",
    "en-us": "en",
    "en-gb": "en", 
    "en-au": "en",
    "en-ca": "en",
    
    // C√°c ng√¥n ng·ªØ kh√°c s·∫Ω fallback v·ªÅ default
  };
  
  // Ki·ªÉm tra exact match tr∆∞·ªõc
  if (localeMapping[locale]) {
    return localeMapping[locale];
  }
  
  // Ki·ªÉm tra theo language code (ph·∫ßn tr∆∞·ªõc d·∫•u -)
  const languageCode = locale.split('-')[0];
  if (localeMapping[languageCode]) {
    return localeMapping[languageCode];
  }
  
  // Fallback v·ªÅ ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh
  return getDefaultLanguage();
}

/**
 * C√°c context ƒë∆∞·ª£c h·ªó tr·ª£ trong c·∫•u tr√∫c m·ªõi
 */
export const SUPPORTED_CONTEXTS = ['client', 'server'] as const;

/**
 * C√°c section ƒë∆∞·ª£c h·ªó tr·ª£ cho t·ª´ng context
 */
export const CONTEXT_SECTIONS = {
  client: ['commands', 'errors', 'messages', 'ui', 'user-facing'],
  server: ['events', 'handlers', 'services', 'internal', 'validation']
} as const;

/**
 * Ki·ªÉm tra context c√≥ h·ª£p l·ªá kh√¥ng
 */
export function isValidContext(context: string): context is 'client' | 'server' {
  return SUPPORTED_CONTEXTS.includes(context as any);
}

/**
 * Ki·ªÉm tra section c√≥ h·ª£p l·ªá cho context kh√¥ng
 */
export function isValidSectionForContext(context: 'client' | 'server', section: string): boolean {
  const validSections = CONTEXT_SECTIONS[context] as readonly string[];
  return validSections.includes(section);
}

/**
 * L·∫•y ƒë∆∞·ªùng d·∫´n file language ƒë·∫ßy ƒë·ªß
 */
export function getLanguageFilePath(locale: string, context: 'client' | 'server', section: string): string {
  return `languages/${locale}/${context}/${section}`;
}