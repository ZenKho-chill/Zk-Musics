import { Logger, LogLevel } from "../structures/Logger.js";
import { Manager } from "../manager.js";
import chalk from "chalk";

/**
 * Helper functions ƒë·ªÉ s·ª≠ d·ª•ng logger d·ªÖ d√†ng h∆°n
 * Cung c·∫•p c√°c shorthand methods cho t·ª´ng lo·∫°i log v·ªõi m√†u s·∫Øc ƒë·∫πp
 */
export class LoggerHelper {
  private static logger = Logger.getInstance();
  private static client: Manager | null = null;

  /**
   * Thi·∫øt l·∫≠p client reference ƒë·ªÉ ki·ªÉm tra debug mode
   */
  public static setClient(client: Manager): void {
    this.client = client;
  }

  /**
   * Ki·ªÉm tra debug mode t·ª´ config
   */
  private static isDebugEnabled(): boolean {
    return this.client?.config?.bot?.DEBUG_MODE ?? false;
  }

  /**
   * T·∫°o message v·ªõi m√†u s·∫Øc ƒë·∫πp cho icon v√† text
   */
  private static colorizeMessage(icon: string, message: string, color: string = "white"): string {
    const coloredIcon = chalk.bold(icon);
    const coloredMessage = (chalk as any)[color](message);
    return `${coloredIcon} ${coloredMessage}`;
  }

  /**
   * Detect caller file path t·ª´ stack trace
   */
  private static getCallerFile(): string {
    const error = new Error();
    const stack = error.stack?.split("\n");
    
    if (!stack || stack.length < 5) return "system";

    // T√¨m stack frame c·ªßa caller (kh√¥ng ph·∫£i LoggerHelper)
    for (let i = 3; i < stack.length; i++) {
      const line = stack[i];
      if (line.includes("file://") && !line.includes("LoggerHelper") && !line.includes("Logger")) {
        try {
          let match = line.match(/file:\/\/\/(.+?):\d+:\d+/) || line.match(/at .+ \((.+?):\d+:\d+\)/);
          if (match) {
            let fullPath = match[1].replace(/\\/g, "/");
            
            let srcIndex = fullPath.lastIndexOf("/src/");
            let distIndex = fullPath.lastIndexOf("/dist/");
            
            if (srcIndex !== -1) {
              const relativePath = fullPath.substring(srcIndex + 5);
              return relativePath.replace(/\.(ts|js)$/, "");
            } else if (distIndex !== -1) {
              const relativePath = fullPath.substring(distIndex + 6);
              return relativePath.replace(/\.(ts|js)$/, "");
            }
          }
        } catch (e) {
          // Ignore parsing errors
        }
      }
    }

    return "system";
  }

  /**
   * Log v·ªõi file path t·ª± ƒë·ªông detect
   */
  private static logWithAutoPath(level: LogLevel, message: string, description?: string, metadata?: Record<string, any>): void {
    const filePath = this.getCallerFile();
    this.logger.logWithPath(filePath, level, message, description, metadata);
  }

  /**
   * Log th√¥ng tin th√†nh c√¥ng - LU√îN hi·ªÉn th·ªã
   */
  public static success(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("‚úÖ", message, "green");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin kh·ªüi ƒë·ªông - LU√îN hi·ªÉn th·ªã
   */
  public static startup(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üöÄ", message, "cyan");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin k·∫øt n·ªëi - LU√îN hi·ªÉn th·ªã
   */
  public static connection(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üîó", message, "blue");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin database - LU√îN hi·ªÉn th·ªã
   */
  public static database(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üíæ", message, "yellow");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin command - LU√îN hi·ªÉn th·ªã
   */
  public static command(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("‚ö°", message, "magenta");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin event - LU√îN hi·ªÉn th·ªã
   */
  public static event(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üì°", message, "cyan");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin music/player - LU√îN hi·ªÉn th·ªã
   */
  public static music(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üéµ", message, "green");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin web server - LU√îN hi·ªÉn th·ªã
   */
  public static web(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("üåê", message, "blue");
    this.logWithAutoPath(LogLevel.INFO, coloredMessage, description, metadata);
  }

  /**
   * Log th√¥ng tin c∆° b·∫£n - LU√îN hi·ªÉn th·ªã
   */
  public static info(message: string, description?: string, metadata?: Record<string, any>): void {
    this.logWithAutoPath(LogLevel.INFO, message, description, metadata);
  }

  /**
   * Log debug th√¥ng tin - CH·ªà hi·ªÉn th·ªã khi DEBUG_MODE = true
   * D√†nh cho th√¥ng tin development v√† troubleshooting
   */
  public static debug(message: string, description?: string, metadata?: Record<string, any>): void {
    // Ch·ªâ log debug khi DEBUG_MODE ƒë∆∞·ª£c b·∫≠t trong config
    if (this.isDebugEnabled()) {
      const coloredMessage = this.colorizeMessage("üîç", message, "gray");
      this.logWithAutoPath(LogLevel.DEBUG, coloredMessage, description, metadata);
    }
  }

  /**
   * Log development info - CH·ªà hi·ªÉn th·ªã khi DEBUG_MODE = true
   * Alias cho debug() v·ªõi t√™n r√µ r√†ng h∆°n
   */
  public static dev(message: string, description?: string, metadata?: Record<string, any>): void {
    if (this.isDebugEnabled()) {
      const coloredMessage = this.colorizeMessage("üßë‚Äçüíª", `DEV: ${message}`, "cyan");
      this.logWithAutoPath(LogLevel.DEBUG, coloredMessage, description, metadata);
    }
  }

  /**
   * Log troubleshooting info - CH·ªà hi·ªÉn th·ªã khi DEBUG_MODE = true  
   * D√†nh cho vi·ªác debug v√† t√¨m l·ªói
   */
  public static troubleshoot(message: string, description?: string, metadata?: Record<string, any>): void {
    if (this.isDebugEnabled()) {
      const coloredMessage = this.colorizeMessage("üîß", `TROUBLESHOOT: ${message}`, "yellow");
      this.logWithAutoPath(LogLevel.DEBUG, coloredMessage, description, metadata);
    }
  }

  /**
   * Log verbose info - CH·ªà hi·ªÉn th·ªã khi DEBUG_MODE = true
   * D√†nh cho th√¥ng tin chi ti·∫øt trong development
   */
  public static verbose(message: string, description?: string, metadata?: Record<string, any>): void {
    if (this.isDebugEnabled()) {
      const coloredMessage = this.colorizeMessage("üìù", `VERBOSE: ${message}`, "gray");
      this.logWithAutoPath(LogLevel.DEBUG, coloredMessage, description, metadata);
    }
  }

  /**
   * Log c·∫£nh b√°o - LU√îN hi·ªÉn th·ªã
   */
  public static warn(message: string, description?: string, metadata?: Record<string, any>): void {
    const coloredMessage = this.colorizeMessage("‚ö†Ô∏è", message, "yellow");
    this.logWithAutoPath(LogLevel.WARN, coloredMessage, description, metadata);
  }

  /**
   * Log l·ªói th√¥ng th∆∞·ªùng - LU√îN hi·ªÉn th·ªã
   */
  public static error(message: string, description?: string, error?: Error, metadata?: Record<string, any>): void {
    const finalMetadata = { ...metadata };
    
    if (error) {
      finalMetadata.error = {
        name: error.name,
        message: error.message,
        stack: error.stack
      };
    }

    const coloredMessage = this.colorizeMessage("‚ùå", message, "red");
    this.logWithAutoPath(LogLevel.ERROR, coloredMessage, description, finalMetadata);
  }

  /**
   * Log l·ªói nghi√™m tr·ªçng - LU√îN hi·ªÉn th·ªã
   */
  public static critical(message: string, description?: string, error?: Error, metadata?: Record<string, any>): void {
    const finalMetadata = { ...metadata };
    
    if (error) {
      finalMetadata.error = {
        name: error.name,
        message: error.message,
        stack: error.stack
      };
    }

    const coloredMessage = this.colorizeMessage("üö®", `CRITICAL: ${message}`, "red");
    this.logWithAutoPath(LogLevel.ERROR, coloredMessage, description, finalMetadata);
  }

  /**
   * Log l·ªói kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω - LU√îN hi·ªÉn th·ªã
   */
  public static unhandled(component: string, error: Error, metadata?: Record<string, any>): void {
    const finalMetadata = { 
      ...metadata,
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    };

    const coloredMessage = this.colorizeMessage("üí•", `L·ªói kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω trong ${component}`, "red");
    this.logWithAutoPath(
      LogLevel.UNHANDLED,
      coloredMessage,
      `Component: ${component} | Error: ${error.message}`,
      finalMetadata
    );
  }

  /**
   * Log v·ªõi file path c·ª• th·ªÉ
   */
  public static logWithPath(
    filePath: string,
    level: LogLevel,
    message: string,
    description?: string,
    metadata?: Record<string, any>
  ): void {
    Logger.getInstance().logWithPath(filePath, level, message, description, metadata);
  }

  /**
   * Log loading progress - LU√îN hi·ªÉn th·ªã
   */
  public static loading(current: number, total: number, item: string, description?: string): void {
    const percentage = Math.round((current / total) * 100);
    const coloredMessage = this.colorizeMessage("‚è≥", `ƒêang t·∫£i ${item}`, "cyan");
    this.logWithAutoPath(
      LogLevel.INFO,
      coloredMessage,
      description || `Ti·∫øn ƒë·ªô: ${current}/${total} (${percentage}%)`,
      { current, total, percentage }
    );
  }

  /**
   * Log completion - LU√îN hi·ªÉn th·ªã
   */
  public static completed(item: string, total: number, description?: string): void {
    const coloredMessage = this.colorizeMessage("‚ú®", `Ho√†n th√†nh t·∫£i ${item}`, "green");
    this.logWithAutoPath(
      LogLevel.INFO,
      coloredMessage,
      description || `T·ªïng s·ªë: ${total}`,
      { total }
    );
  }

  /**
   * Log user action - LU√îN hi·ªÉn th·ªã
   */
  public static userAction(
    userId: string,
    action: string,
    guildId?: string,
    description?: string,
    metadata?: Record<string, any>
  ): void {
    const coloredMessage = this.colorizeMessage("üë§", `H√†nh ƒë·ªông ng∆∞·ªùi d√πng: ${action}`, "blue");
    this.logWithAutoPath(
      LogLevel.INFO,
      coloredMessage,
      description,
      {
        userId,
        guildId,
        action,
        ...metadata
      }
    );
  }

  /**
   * Log system performance - LU√îN hi·ªÉn th·ªã
   */
  public static performance(
    operation: string,
    duration: number,
    description?: string,
    metadata?: Record<string, any>
  ): void {
    const level = duration > 5000 ? LogLevel.WARN : LogLevel.INFO;
    const icon = duration > 5000 ? "‚ö†Ô∏è" : "‚ö°";
    const color = duration > 5000 ? "yellow" : "green";
    const message = duration > 5000 ? `Hi·ªáu su·∫•t ch·∫≠m: ${operation}` : `Ho√†n th√†nh: ${operation}`;
    const coloredMessage = this.colorizeMessage(icon, message, color);
    
    this.logWithAutoPath(
      level,
      coloredMessage,
      description || `Th·ªùi gian th·ª±c hi·ªán: ${duration}ms`,
      {
        operation,
        duration,
        slow: duration > 5000,
        ...metadata
      }
    );
  }

  /**
   * Log security events - LU√îN hi·ªÉn th·ªã
   */
  public static security(
    event: string,
    userId?: string,
    guildId?: string,
    description?: string,
    metadata?: Record<string, any>
  ): void {
    const coloredMessage = this.colorizeMessage("üîí", `S·ª± ki·ªán b·∫£o m·∫≠t: ${event}`, "red");
    this.logWithAutoPath(
      LogLevel.WARN,
      coloredMessage,
      description,
      {
        userId,
        guildId,
        event,
        timestamp: new Date().toISOString(),
        ...metadata
      }
    );
  }

  /**
   * Log cleanup operations - LU√îN hi·ªÉn th·ªã
   */
  public static cleanup(operation: string, itemsProcessed: number, description?: string): void {
    const coloredMessage = this.colorizeMessage("üßπ", `D·ªçn d·∫πp: ${operation}`, "yellow");
    this.logWithAutoPath(
      LogLevel.INFO,
      coloredMessage,
      description || `ƒê√£ x·ª≠ l√Ω ${itemsProcessed} m·ª•c`,
      { operation, itemsProcessed }
    );
  }

  /**
   * Log banner/header ƒë·∫πp m·∫Øt - LU√îN hi·ªÉn th·ªã
   */
  public static banner(title: string, version?: string): void {
    const line = chalk.cyan("=".repeat(60));
    const titleLine = chalk.bold.yellow(`üéµ ${title.toUpperCase()} üéµ`);
    const versionLine = version ? chalk.gray(`Version: ${version}`) : "";
    
    console.log(line);
    console.log(chalk.cyan("=") + " ".repeat(58) + chalk.cyan("="));
    console.log(chalk.cyan("=") + " ".repeat(Math.floor((58 - titleLine.length) / 2)) + titleLine + " ".repeat(Math.ceil((58 - titleLine.length) / 2)) + chalk.cyan("="));
    if (versionLine) {
      console.log(chalk.cyan("=") + " ".repeat(Math.floor((58 - versionLine.length) / 2)) + versionLine + " ".repeat(Math.ceil((58 - versionLine.length) / 2)) + chalk.cyan("="));
    }
    console.log(chalk.cyan("=") + " ".repeat(58) + chalk.cyan("="));
    console.log(line);
    console.log("");
  }

  /**
   * Log separator ƒë·∫πp m·∫Øt
   */
  public static separator(title?: string): void {
    if (title) {
      const line = chalk.gray("‚îÄ".repeat(20)) + ` ${chalk.bold.white(title)} ` + chalk.gray("‚îÄ".repeat(20));
      console.log(line);
    } else {
      console.log(chalk.gray("‚îÄ".repeat(60)));
    }
  }

  /**
   * Log progress bar ƒë·∫πp m·∫Øt
   */
  public static progressBar(current: number, total: number, message: string): void {
    const percentage = Math.round((current / total) * 100);
    const barLength = 30;
    const filledLength = Math.round(barLength * (current / total));
    const bar = "‚ñà".repeat(filledLength) + "‚ñë".repeat(barLength - filledLength);
    
    const coloredBar = chalk.green("‚ñà".repeat(filledLength)) + chalk.gray("‚ñë".repeat(barLength - filledLength));
    const percentageText = chalk.bold.cyan(`${percentage}%`);
    const progressText = chalk.white(`${current}/${total}`);
    
    console.log(`${this.colorizeMessage("üìä", message, "cyan")} [${coloredBar}] ${percentageText} (${progressText})`);
  }

  /**
   * Get logger instance tr·ª±c ti·∫øp n·∫øu c·∫ßn thi·∫øt
   */
  public static getLogger(): Logger {
    return this.logger;
  }
}

/**
 * Shorthand exports ƒë·ªÉ s·ª≠ d·ª•ng nhanh
 */
export const log = LoggerHelper;
export const logger = Logger.getInstance();