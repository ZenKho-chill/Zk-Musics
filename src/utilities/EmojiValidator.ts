/**
 * Utility ƒë·ªÉ validate emoji tr∆∞·ªõc khi s·ª≠ d·ª•ng trong Discord components
 */
export class EmojiValidator {
  /**
   * Test xem bot c√≥ th·ªÉ s·ª≠ d·ª•ng emoji kh√¥ng b·∫±ng c√°ch th·ª≠ t·∫°o m·ªôt message t·∫°m
   * @param client - Discord client instance
   * @param emoji - Emoji string ƒë·ªÉ test
   * @returns Promise<boolean> - true n·∫øu c√≥ quy·ªÅn truy c·∫≠p
   */
  static async canAccessEmoji(client: any, emoji: string): Promise<boolean> {
    try {
      if (!emoji || emoji.trim() === "") return false;

      // Unicode emoji lu√¥n available
      const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
      if (unicodeEmojiRegex.test(emoji)) return true;

      // Parse custom emoji
      const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
      const match = emoji.match(customEmojiRegex);
      
      if (!match) return false;
      
      const [, animated, name, id] = match;
      
      // Ki·ªÉm tra emoji c√≥ trong cache c·ªßa bot kh√¥ng
      const emojiFromCache = client.emojis.cache.get(id);
      if (emojiFromCache) return true;

      // N·∫øu kh√¥ng c√≥ trong cache, c√≥ th·ªÉ l√† emoji t·ª´ server kh√°c
      // Bot ch·ªâ c√≥ th·ªÉ d√πng emoji t·ª´ server m√† n√≥ c√≥ m·∫∑t
      return false;
      
    } catch (error) {
      return false;
    }
  }

  /**
   * Safely get emoji cho Button v·ªõi ki·ªÉm tra quy·ªÅn truy c·∫≠p
   * @param client - Discord client instance
   * @param emoji - Emoji string
   * @param fallback - Fallback emoji
   * @returns Promise<emoji object ho·∫∑c fallback ho·∫∑c null ƒë·ªÉ b·ªè emoji>
   */
  static async safeEmojiForButton(
    client: any,
    emoji: string,
    fallback: string = "‚ùì",
    removeIfNoAccess: boolean = false
  ): Promise<string | { id: string; name: string; animated?: boolean } | null> {
    try {
      if (!emoji || emoji.trim() === "") {
        return removeIfNoAccess ? null : fallback;
      }

      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      const canAccess = await this.canAccessEmoji(client, emoji);
      
      if (!canAccess) {
        // N·∫øu kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√† y√™u c·∫ßu x√≥a emoji
        if (removeIfNoAccess) return null;
        // N·∫øu kh√¥ng th√¨ d√πng fallback
        return fallback;
      }

      // N·∫øu c√≥ quy·ªÅn truy c·∫≠p, parse emoji
      const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
      if (unicodeEmojiRegex.test(emoji)) return emoji;

      // Parse custom emoji
      const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
      const match = emoji.match(customEmojiRegex);

      if (match) {
        const [, animated, name, id] = match;
        
        const result: { id: string; name: string; animated?: boolean } = {
          id: id,
          name: name,
        };

        if (animated === "a") {
          result.animated = true;
        }

        return result;
      }

      return removeIfNoAccess ? null : fallback;
    } catch (error) {
      return removeIfNoAccess ? null : fallback;
    }
  }

  /**
   * Ki·ªÉm tra xem emoji string c√≥ h·ª£p l·ªá kh√¥ng
   * @param emoji - Emoji string (c√≥ th·ªÉ l√† unicode ho·∫∑c custom emoji)
   * @returns true n·∫øu h·ª£p l·ªá
   */
  static isValidEmoji(emoji: string): boolean {
    if (!emoji || emoji.trim() === "") return false;

    // Ki·ªÉm tra unicode emoji (v√≠ d·ª•: üéµ, üé∂)
    const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
    if (unicodeEmojiRegex.test(emoji)) return true;

    // Ki·ªÉm tra custom emoji format: <:name:id> ho·∫∑c <a:name:id>
    const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
    const match = emoji.match(customEmojiRegex);

    if (match) {
      const [, animated, name, id] = match;
      // Ki·ªÉm tra name kh√¥ng r·ªóng v√† id l√† s·ªë h·ª£p l·ªá
      return name.length > 0 && id.length > 0 && /^\d+$/.test(id);
    }

    return false;
  }

  /**
   * Safely set emoji cho Button ho·∫∑c SelectMenu
   * @param emoji - Emoji string
   * @param fallback - Fallback emoji n·∫øu original kh√¥ng h·ª£p l·ªá
   * @returns emoji string h·ª£p l·ªá ho·∫∑c fallback
   */
  static safeEmoji(emoji: string, fallback: string = "‚ùì"): string {
    if (!emoji) return fallback;
    return this.isValidEmoji(emoji) ? emoji : fallback;
  }

  /**
   * Safely get custom emoji for Button components v·ªõi extra validation
   * @param emoji - Custom emoji string
   * @param fallback - Fallback unicode emoji
   * @returns emoji object ho·∫∑c fallback an to√†n
   */
  static safeCustomEmojiForButton(
    emoji: string,
    fallback: string = "‚ùì"
  ): string | { id: string; name: string; animated?: boolean } {
    try {
      if (!emoji || emoji.trim() === "") return fallback;

      // N·∫øu l√† unicode emoji, tr·∫£ v·ªÅ ngay
      const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
      if (unicodeEmojiRegex.test(emoji)) return emoji;

      // Parse custom emoji
      const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
      const match = emoji.match(customEmojiRegex);

      if (match) {
        const [, animated, name, id] = match;
        
        // Validation nghi√™m ng·∫∑t h∆°n
        if (!name || name.length === 0 || name.length > 32) return fallback;
        if (!id || !/^\d{17,20}$/.test(id)) return fallback; // Discord snowflake ID format
        
        const result: { id: string; name: string; animated?: boolean } = {
          id: id,
          name: name,
        };

        if (animated === "a") {
          result.animated = true;
        }

        return result;
      }

      // N·∫øu kh√¥ng match format n√†o, return fallback
      return fallback;
    } catch (error) {
      // N·∫øu c√≥ l·ªói g√¨, lu√¥n return fallback
      return fallback;
    }
  }

  /**
   * Get emoji object for Discord.js Button/SelectMenu components
   * @param emoji - Emoji string
   * @param fallback - Fallback emoji n·∫øu original kh√¥ng h·ª£p l·ªá
   * @returns emoji object cho Discord.js ho·∫∑c fallback
   */
  static getEmojiForComponent(
    emoji: string,
    fallback: string = "‚ùì"
  ): string | { id: string; name: string; animated?: boolean } | null {
    if (!emoji) return fallback;

    if (!this.isValidEmoji(emoji)) return fallback;

    // N·∫øu l√† unicode emoji, tr·∫£ v·ªÅ string
    const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
    if (unicodeEmojiRegex.test(emoji)) return emoji;

    // N·∫øu l√† custom emoji, parse th√†nh object
    const customEmoji = this.parseCustomEmoji(emoji);
    if (customEmoji) {
      // Ch·ªâ return object v·ªõi id v√† name, kh√¥ng c√≥ animated n·∫øu l√† false
      const result: { id: string; name: string; animated?: boolean } = {
        id: customEmoji.id,
        name: customEmoji.name,
      };

      // Ch·ªâ th√™m animated n·∫øu true
      if (customEmoji.animated) {
        result.animated = true;
      }

      return result;
    }

    return fallback;
  }

  /**
   * Parse custom emoji th√†nh object
   * @param emoji - Custom emoji string
   * @returns object v·ªõi animated, name, id ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá
   */
  static parseCustomEmoji(emoji: string): { animated: boolean; name: string; id: string } | null {
    const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
    const match = emoji.match(customEmojiRegex);

    if (match) {
      const [, animated, name, id] = match;
      return {
        animated: animated === "a",
        name,
        id,
      };
    }
    return null;
  }
}
