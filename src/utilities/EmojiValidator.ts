/**
 * Utility ƒë·ªÉ validate emoji tr∆∞·ªõc khi s·ª≠ d·ª•ng trong Discord components
 */
export class EmojiValidator {
  /**
   * Ki·ªÉm tra xem emoji string c√≥ h·ª£p l·ªá kh√¥ng
   * @param emoji - Emoji string (c√≥ th·ªÉ l√† unicode ho·∫∑c custom emoji)
   * @returns true n·∫øu h·ª£p l·ªá
   */
  static isValidEmoji(emoji: string): boolean {
    if (!emoji || emoji.trim() === "") return false;

    // Ki·ªÉm tra unicode emoji (v√≠ d·ª•: üéµ, üé∂)
    const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
    if (unicodeEmojiRegex.test(emoji)) return true;

    // Ki·ªÉm tra custom emoji format: <:name:id> ho·∫∑c <a:name:id>
    const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
    const match = emoji.match(customEmojiRegex);

    if (match) {
      const [, animated, name, id] = match;
      // Ki·ªÉm tra name kh√¥ng r·ªóng v√† id l√† s·ªë h·ª£p l·ªá
      return name.length > 0 && id.length > 0 && /^\d+$/.test(id);
    }

    return false;
  }

  /**
   * Safely set emoji cho Button ho·∫∑c SelectMenu
   * @param emoji - Emoji string
   * @param fallback - Fallback emoji n·∫øu original kh√¥ng h·ª£p l·ªá
   * @returns emoji string h·ª£p l·ªá ho·∫∑c fallback
   */
  static safeEmoji(emoji: string, fallback: string = "‚ùì"): string {
    if (!emoji) return fallback;
    return this.isValidEmoji(emoji) ? emoji : fallback;
  }

  /**
   * Get emoji object for Discord.js Button/SelectMenu components
   * @param emoji - Emoji string
   * @param fallback - Fallback emoji n·∫øu original kh√¥ng h·ª£p l·ªá
   * @returns emoji object cho Discord.js ho·∫∑c fallback
   */
  static getEmojiForComponent(
    emoji: string,
    fallback: string = "‚ùì"
  ): string | { id: string; name: string; animated?: boolean } | null {
    if (!emoji) return fallback;

    if (!this.isValidEmoji(emoji)) return fallback;

    // N·∫øu l√† unicode emoji, tr·∫£ v·ªÅ string
    const unicodeEmojiRegex = /^[\p{Emoji}]$/u;
    if (unicodeEmojiRegex.test(emoji)) return emoji;

    // N·∫øu l√† custom emoji, parse th√†nh object
    const customEmoji = this.parseCustomEmoji(emoji);
    if (customEmoji) {
      // Ch·ªâ return object v·ªõi id v√† name, kh√¥ng c√≥ animated n·∫øu l√† false
      const result: { id: string; name: string; animated?: boolean } = {
        id: customEmoji.id,
        name: customEmoji.name,
      };

      // Ch·ªâ th√™m animated n·∫øu true
      if (customEmoji.animated) {
        result.animated = true;
      }

      return result;
    }

    return fallback;
  }

  /**
   * Parse custom emoji th√†nh object
   * @param emoji - Custom emoji string
   * @returns object v·ªõi animated, name, id ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá
   */
  static parseCustomEmoji(emoji: string): { animated: boolean; name: string; id: string } | null {
    const customEmojiRegex = /^<(a?):([^:]+):(\d+)>$/;
    const match = emoji.match(customEmojiRegex);

    if (match) {
      const [, animated, name, id] = match;
      return {
        animated: animated === "a",
        name,
        id,
      };
    }
    return null;
  }
}
