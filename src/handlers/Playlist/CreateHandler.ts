import { 
  EmbedBuilder, 
  ModalBuilder, 
  TextInputBuilder, 
  TextInputStyle, 
  ActionRowBuilder, 
  ModalSubmitInteraction,
} from "discord.js";
import id from "voucher-code-generator";
import { Manager } from "../../manager.js";
import { CommandHandler } from "../../structures/CommandHandler.js";
import { Config } from "../../@types/Config.js";
import { ConfigData } from "../../services/ConfigData.js";
import { logInfo, logDebug, logWarn, logError } from "../../utilities/Logger.js";

const data: Config = new ConfigData().data;

export class PlaylistCreateHandler {
  public async execute(client: Manager, handler: CommandHandler) {
    // T·∫°o modal ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin playlist
    const modal = new ModalBuilder()
      .setCustomId("playlist_create_modal")
      .setTitle("üéµ T·∫°o Playlist M·ªõi");

    // Input cho t√™n playlist
    const nameInput = new TextInputBuilder()
      .setCustomId("playlist_name")
      .setLabel("T√™n Playlist")
      .setStyle(TextInputStyle.Short)
      .setPlaceholder("Nh·∫≠p t√™n playlist c·ªßa b·∫°n...")
      .setRequired(true)
      .setMaxLength(16);

    // Input cho m√¥ t·∫£ playlist (t√πy ch·ªçn)
    const descriptionInput = new TextInputBuilder()
      .setCustomId("playlist_description")
      .setLabel("M√¥ T·∫£ Playlist (T√πy ch·ªçn)")
      .setStyle(TextInputStyle.Paragraph)
      .setPlaceholder("Nh·∫≠p m√¥ t·∫£ cho playlist...")
      .setRequired(false)
      .setMaxLength(1000);

    // T·∫°o action rows cho t·ª´ng input
    const nameRow = new ActionRowBuilder<TextInputBuilder>().addComponents(nameInput);
    const descriptionRow = new ActionRowBuilder<TextInputBuilder>().addComponents(descriptionInput);

    // Th√™m components v√†o modal
    modal.addComponents(nameRow, descriptionRow);

    // Hi·ªÉn th·ªã modal
    await handler.interaction.showModal(modal);

    // L·∫Øng nghe modal submit
    try {
      const modalInteraction = await handler.interaction.awaitModalSubmit({
        time: 300000, // 5 ph√∫t timeout
        filter: (i) => i.customId === "playlist_create_modal" && i.user.id === handler.user?.id,
      });

      // Defer reply cho modal interaction
      await modalInteraction.deferReply({ ephemeral: true });

      // L·∫•y d·ªØ li·ªáu t·ª´ modal
      const playlistName = modalInteraction.fields.getTextInputValue("playlist_name").trim();
      const playlistDescription = modalInteraction.fields.getTextInputValue("playlist_description").trim() || null;

      // X·ª≠ l√Ω t·∫°o playlist
      await this.createPlaylist(client, modalInteraction, playlistName, playlistDescription, handler.language);
      
    } catch (error) {
      // Timeout ho·∫∑c l·ªói kh√°c
      logError("CreateHandler", "Modal submit error", { error });
      // Kh√¥ng c·∫ßn handle v√¨ user ƒë√£ ƒë√≥ng modal ho·∫∑c timeout
    }
  }

  private async createPlaylist(
    client: Manager,
    interaction: ModalSubmitInteraction,
    playlistName: string,
    playlistDescription: string | null,
    language: string
  ) {
    // Ki·ªÉm tra t√™n playlist kh√¥ng r·ªóng
    if (!playlistName || playlistName.length === 0) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setDescription("‚ùå T√™n playlist kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            .setColor(client.color_main),
        ],
      });
    }

    // Ki·ªÉm tra ƒë·ªô d√†i t√™n playlist
    if (playlistName.length > 16) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setDescription("‚ùå T√™n playlist kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 16 k√Ω t·ª±!")
            .setColor(client.color_main),
        ],
      });
    }

    // Ki·ªÉm tra ƒë·ªô d√†i m√¥ t·∫£
    if (playlistDescription && playlistDescription.length > 1000) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setDescription("‚ùå M√¥ t·∫£ playlist kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±!")
            .setColor(client.color_main),
        ],
      });
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë playlist c·ªßa user
    const fullList = await client.db.playlist.all();
    const userPlaylists = fullList.filter((data) => {
      return data.value.owner == interaction.user.id;
    });

    if (userPlaylists.length >= client.config.features.LIMIT_PLAYLIST) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setDescription(
              `‚ùå B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n ${client.config.features.LIMIT_PLAYLIST} playlist!`
            )
            .setColor(client.color_main),
        ],
      });
    }

    // T·∫°o ID ng·∫´u nhi√™n cho playlist
    const playlistId = id.generate({
      length: 8,
      charset: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
    })[0];

    // Ki·ªÉm tra ID c√≥ tr√πng kh√¥ng
    const existing = await client.db.playlist.get(playlistId);
    if (existing) {
      return interaction.editReply({
        embeds: [
          new EmbedBuilder()
            .setDescription("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o playlist! Vui l√≤ng th·ª≠ l·∫°i.")
            .setColor(client.color_main),
        ],
      });
    }

    // T·∫°o playlist m·ªõi
    await client.db.playlist.set(playlistId, {
      id: playlistId,
      name: playlistName,
      owner: interaction.user.id,
      tracks: [],
      private: true, // M·∫∑c ƒë·ªãnh playlist l√† private
      created: Date.now(),
      description: playlistDescription,
    });

    // Th√¥ng b√°o th√†nh c√¥ng
    const successEmbed = new EmbedBuilder()
      .setTitle("‚úÖ T·∫°o Playlist Th√†nh C√¥ng!")
      .setDescription(
        `**T√™n playlist:** \`${playlistName}\`\n` +
        `**ID:** ||\`${playlistId}\`||\n` +
        `**M√¥ t·∫£:** ${playlistDescription || "*Kh√¥ng c√≥ m√¥ t·∫£*"}\n` +
        `**Tr·∫°ng th√°i:** Ri√™ng t∆∞\n` +
        `**S·ªë b√†i h√°t:** 0`
      )
      .setColor(client.color_main)
      .setTimestamp()
      .setFooter({
        text: `T·∫°o b·ªüi ${interaction.user.displayName || interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL(),
      });

    await interaction.editReply({
      embeds: [successEmbed],
    });
  }
}
