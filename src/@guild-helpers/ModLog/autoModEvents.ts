import {
  AutoModerationActionExecution,
  AutoModerationRule,
  EmbedBuilder,
} from "discord.js";
import { isEventEnabled, getModLogChannel } from "../ModLogEventUtils.js";
import { Manager } from "../../manager.js";

export class AutoModEventsHandler {
  private client: Manager;

  constructor(client: Manager) {
    this.client = client;
    this.init();
  }

  private init() {
    this.client.on(
      "autoModerationActionExecution",
      this.handleAutoModerationActionExecution.bind(this)
    );
    this.client.on(
      "autoModerationRuleCreate",
      this.handleAutoModerationRuleCreate.bind(this)
    );
    this.client.on(
      "autoModerationRuleUpdate",
      this.handleAutoModerationRuleUpdate.bind(this)
    );
    this.client.on(
      "autoModerationRuleDelete",
      this.handleAutoModerationRuleDelete.bind(this)
    );
  }

  // X·ª≠ l√Ω s·ª± ki·ªán AutoModerationActionExecution
  private async handleAutoModerationActionExecution(
    action: AutoModerationActionExecution
  ) {
    const guild = action.guild;
    if (!guild) return;
    if (
      !(await isEventEnabled(
        guild.id,
        "autoModerationActionExecution",
        this.client.db
      ))
    )
      return;

    const modLogChannel = await getModLogChannel(guild.id, this.client);
    if (!modLogChannel) return;

    const rule = await guild.autoModerationRules
      .fetch(action.ruleId)
      .catch(() => null);
    const ruleName = rule ? rule.name : "Kh√¥ng x√°c ƒë·ªãnh";

    const userMention = action.user
      ? `<@${action.user.id}>`
      : "Kh√¥ng r√µ ng∆∞·ªùi d√πng";

    await modLogChannel.send({
      embeds: [
        new EmbedBuilder()
          .setColor(0xff4500)
          .setTitle("üö® H√†nh ƒë·ªông T·ª± ƒë·ªông Ki·ªÉm duy·ªát ƒë∆∞·ª£c th·ª±c thi")
          .setDescription(`**Lo·∫°i h√†nh ƒë·ªông:** ${action.action.type}`)
          .addFields(
            { name: "Lu·∫≠t", value: ruleName, inline: true },
            { name: "Ng∆∞·ªùi d√πng", value: userMention, inline: true },
            {
              name: "K√™nh",
              value: action.channel
                ? `<#${action.channel.id}>`
                : "Tin nh·∫Øn ri√™ng (DM)",
              inline: true,
            },
            {
              name: "N·ªôi dung",
              value: action.content || "Kh√¥ng c√≥ n·ªôi dung",
              inline: false,
            }
          )
          .setFooter({
            text:
              this.client.user?.username ||
              this.client.user?.tag ||
              "Kh√¥ng r√µ",
            iconURL:
              this.client.user?.displayAvatarURL() ||
              "https://raw.githubusercontent.com/ZenKho-chill/zkcard/main/build/structures/images/avatar.png",
          })
          .setTimestamp(new Date()),
      ],
    });
  }

  // X·ª≠ l√Ω s·ª± ki·ªán t·∫°o lu·∫≠t AutoMod
  private async handleAutoModerationRuleCreate(rule: AutoModerationRule) {
    const guild = rule.guild;
    if (!guild) return;
    if (
      !(await isEventEnabled(
        guild.id,
        "autoModerationRuleCreate",
        this.client.db
      ))
    )
      return;

    const modLogChannel = await getModLogChannel(guild.id, this.client);
    if (!modLogChannel) return;

    await modLogChannel.send({
      embeds: [
        new EmbedBuilder()
          .setColor(0x32cd32)
          .setTitle("‚úÖ Lu·∫≠t T·ª± ƒë·ªông Ki·ªÉm duy·ªát ƒë√£ ƒë∆∞·ª£c t·∫°o")
          .addFields(
            { name: "T√™n lu·∫≠t", value: rule.name, inline: true },
            {
              name: "K√≠ch ho·∫°t",
              value: rule.enabled ? "C√≥" : "Kh√¥ng",
              inline: true,
            },
            { name: "Ng∆∞·ªùi t·∫°o", value: `<@${rule.creatorId}>`, inline: true }
          )
          .setFooter({
            text:
              this.client.user?.username ||
              this.client.user?.tag ||
              "Kh√¥ng r√µ",
            iconURL:
              this.client.user?.displayAvatarURL() ||
              "https://raw.githubusercontent.com/ZenKho-chill/zkcard/main/build/structures/images/avatar.png",
          })
          .setTimestamp(new Date()),
      ],
    });
  }

  // X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t lu·∫≠t AutoMod
  private async handleAutoModerationRuleUpdate(
    oldRule: AutoModerationRule | null,
    newRule: AutoModerationRule
  ) {
    const guild = newRule.guild;
    if (!guild) return;
    if (
      !(await isEventEnabled(
        guild.id,
        "autoModerationRuleUpdate",
        this.client.db
      ))
    )
      return;

    const modLogChannel = await getModLogChannel(guild.id, this.client);
    if (!modLogChannel) return;

    const changes: string[] = [];

    if (oldRule) {
      if (oldRule.name !== newRule.name)
        changes.push(`**T√™n lu·∫≠t:** ${oldRule.name} ‚Üí ${newRule.name}`);
      if (oldRule.enabled !== newRule.enabled)
        changes.push(
          `**Tr·∫°ng th√°i:** ${oldRule.enabled ? "B·∫≠t" : "T·∫Øt"} ‚Üí ${
            newRule.enabled ? "B·∫≠t" : "T·∫Øt"
          }`
        );
    } else {
      // Tr∆∞·ªùng h·ª£p oldRule null (c√≥ th·ªÉ l√† m·ªõi t·∫°o ho·∫∑c kh√¥ng c√≥ tr·∫°ng th√°i c≈©)
      changes.push(`**Lu·∫≠t ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t:** ${newRule.name}`);
    }

    if (changes.length === 0) return; // Kh√¥ng c√≥ thay ƒë·ªïi

    await modLogChannel.send({
      embeds: [
        new EmbedBuilder()
          .setColor(0x1e90ff)
          .setTitle("üõ†Ô∏è Lu·∫≠t T·ª± ƒë·ªông Ki·ªÉm duy·ªát ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t")
          .setDescription(changes.join("\n"))
          .setFooter({
            text: this.client.user?.username || this.client.user?.tag || "Kh√¥ng r√µ",
            iconURL:
              this.client.user?.displayAvatarURL() ||
              "https://raw.githubusercontent.com/ZenKho-chill/zkcard/main/build/structures/images/avatar.png",
          })
          .setTimestamp(new Date()),
      ],
    });
  }

  // X·ª≠ l√Ω s·ª± ki·ªán x√≥a lu·∫≠t AutoMod
  private async handleAutoModerationRuleDelete(rule: AutoModerationRule) {
    const guild = rule.guild;
    if (!guild) return;
    if (
      !(await isEventEnabled(
        guild.id,
        "autoModerationRuleDelete",
        this.client.db
      ))
    )
      return;

    const modLogChannel = await getModLogChannel(guild.id, this.client);
    if (!modLogChannel) return;

    await modLogChannel.send({
      embeds: [
        new EmbedBuilder()
          .setColor(0xff4500)
          .setTitle("üóëÔ∏è Lu·∫≠t T·ª± ƒë·ªông Ki·ªÉm duy·ªát ƒë√£ b·ªã x√≥a")
          .addFields(
            { name: "T√™n lu·∫≠t", value: rule.name, inline: true },
            { name: "Ng∆∞·ªùi x√≥a", value: `<@${rule.creatorId}>`, inline: true }
          )
          .setFooter({
            text:
              this.client.user?.username ||
              this.client.user?.tag ||
              "Kh√¥ng r√µ",
            iconURL:
              this.client.user?.displayAvatarURL() ||
              "https://raw.githubusercontent.com/ZenKho-chill/zkcard/main/build/structures/images/avatar.png",
          })
          .setTimestamp(new Date()),
      ],
    });
  }
}
